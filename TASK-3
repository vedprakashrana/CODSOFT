#include <iostream>
#include <vector>
#include <string>

using namespace std;

struct Task {
    string title;
    bool isDone;

    Task(string t) {
        title = t;
        isDone = false;
    }
};

void showMenu() {
    cout << "\n--- TO-DO LIST MENU ---\n";
    cout << "1. Add Task\n";
    cout << "2. View Tasks\n";
    cout << "3. Mark Task as Completed\n";
    cout << "4. Remove Task\n";
    cout << "5. Exit\n";
    cout << "Choose an option: ";
}

void addTask(vector<Task> &tasks) {
    string taskTitle;
    cout << "Enter task: ";
    cin.ignore();
    getline(cin, taskTitle);
    tasks.push_back(Task(taskTitle));
    cout << "Task added successfully.\n";
}

void viewTasks(const vector<Task> &tasks) {
    if (tasks.empty()) {
        cout << "No tasks added yet.\n";
        return;
    }

    cout << "\nYour Tasks:\n";
    for (size_t i = 0; i < tasks.size(); ++i) {
        cout << i + 1 << ". " << tasks[i].title;
        if (tasks[i].isDone)
            cout << " [Done]";
        else
            cout << " [Pending]";
        cout << endl;
    }
}

void markCompleted(vector<Task> &tasks) {
    if (tasks.empty()) {
        cout << "No tasks to update.\n";
        return;
    }

    int num;
    viewTasks(tasks);
    cout << "Enter task number to mark as done: ";
    cin >> num;

    if (num > 0 && num <= tasks.size()) {
        tasks[num - 1].isDone = true;
        cout << "Marked as completed.\n";
    } else {
        cout << "Invalid task number.\n";
    }
}

void removeTask(vector<Task> &tasks) {
    if (tasks.empty()) {
        cout << "No tasks to remove.\n";
        return;
    }

    int num;
    viewTasks(tasks);
    cout << "Enter task number to remove: ";
    cin >> num;

    if (num > 0 && num <= tasks.size()) {
        tasks.erase(tasks.begin() + (num - 1));
        cout << "Task removed.\n";
    } else {
        cout << "Invalid task number.\n";
    }
}

int main() {
    vector<Task> taskList;
    int choice;

    do {
        showMenu();
        cin >> choice;

        switch (choice) {
            case 1: addTask(taskList); break;
            case 2: viewTasks(taskList); break;
            case 3: markCompleted(taskList); break;
            case 4: removeTask(taskList); break;
            case 5: cout << "Exiting To-Do List. Goodbye!\n"; break;
            default: cout << "Invalid option.\n";
        }
    } while (choice != 5);

    return 0;
}
